O arquivo 'postgresql.conf'
	Arquivo onde estão definidas e armazenadas todas as configurações do servidor PostgreSQL. Alguns parâmetros só podem
	ser alterados com uma reinicialização do banco de dados. A view pg_settings, acessada por dentro do banco de dados,
	guarda todas as configurações atuais.

	postgresql.conf
		Ao acessar a view pg_settings, é possível visualizar todas as configurações atuais:
			SELECT name,setting
			FROM pg_settings;
		Ou é possível usar o comando:
			SHOW [parâmetro];
		
		Por padrão, encontra-se dentro do diretório PGDATA definido no momento da inicialização do cluster de banco de dados.
		No sistema operacional Ubuntu, se o PostgreSQL foi instalado a partir do repositório oficial, o local do arquivo
			postgresql.conf será diferente do diretório de dados.

				'/etc/postgresql/[versao]/[nome do cluster]/postgresql.conf'

		Configurações de Conexão
			- LISTEN_ADDRESS
				Endereço(s) TCP/IP das interfaces que o servidor PostgreSQL vai escutar/liberar conexões.
			- PORT 
				A porta TCP que o servidor PostgreSQL vai ouvir. O padrão é 5432.
			- MAX_CONNECTIONS
				Número máximo de conexões simultâneas no servidor PostgreSQL
			- SUPERUSER_RESERVED_CONNECTIONS
				Número de conexões (slots) reservadas para conexões ao banco de dados de super usuários.

		Configurações de Autenticação
			- AUTHENTICATION_TIMEOUT
				Tempo máximo em segundos para o cliente conseguir uma conexão com o servidor.
			- PASSWORD_ENCRYPTION
				Algoritmo de criptografia das senha dos novos usuários criadps no banco de dados.
			- SSL
				Habilita a conexão criptografada por SSL (Somente se o PostgreSQL foi compilado com suporte SSL)

		Configurações de memória
			- SHARED_BUFFERS
				Tamanho da memória compartilhada do servidor PostgreSQL para cache/buffer de tabelas, índices e demais relações.
			- WORK_MEM
				Tamanho da memória para operações de agrupamento e ordenação (ORDER BY,DISTINCT, MERGE JOINS)
			- MAINTENANCE_WORK_MEM
				Tamanho da memória para operações como VACUUM, INDEX, ALTER TABLE.
	
	Arquivo pg_hba.conf
		Arquivo responsável pelo controle de autenticação dos usuários no servidor PostgreSQL.
		
		Métodos de autenticação
			- TRUST (Conexão sem requisição sem senha)
			- REJECT (Rejeitar conexões)
			- MD5 (Criptografia md5)
			- PASSWORD (Senha sem criptografia)
			- GSS (Generic Security Service Application Program Interface)
			- SSPI (Security Support Provider Interface - Somente para Windows)
			- KRB5 (Kerberos V5)
			- IDENT (Utiliza o Usuário do Sistema Operacional do Cliente via Ident Server)
			- PEER (Utiliza o Usuário do Sistema Operacional do Cliente)
			- LDAP (Idap Server)
			- RADIUS (Radius Server)
			- CERT (Autenticação Via Certificado SSL do Cliente)
			- PAM (Pluggable Authentication Modules. O Usuário precisa estar no bloco)

	O Arquivo pg_ident.conf
		Arquivo responsável por mapear os usuários do sistema operacional com os usuários do sistema operacional com
			os usuários do banco de dados. Localizado no diretório de dados PGDATA de sua instalação.
		A opção de ident deve ser utilizada no arquivo pg_hba.conf


	Comandos Aministrativos 
		Ubuntu:
			- pg_lscluster: Lista todos os clusters.
			- pg_createcluster <version> <cluster name> : Cria um novo cluster PostgreSQL.
			- pg_dropcluster <version> <cluster> : Apaga um cluster PostgreSQL.
			- pg_ctcluster <version> <cluster> <action>: Start, Stop, Status, Restart de clusters PostgreSQL.

		Binários do PostgreSQL:
			- createdb
			- createuser 
			- dropdb
			- dropuser
			- initdb
			- pg_ctl
			- pg_basebackup
			- pg_dump / pg_dumpall
			- pg_restore
			- psql
			- reindexdb
			- vacuumdb
			
	Arquitetura/Hierarquia
		Cluster
			Coleção de banco de dados que compartilham as mesmas configurações (arquivos de configuração) do 
			PostgreSQL e do sistema operacional (porta,listen_addresses, etc).
			
		Banco de Dados (database)
			Conjunto de schemas com seus objetos/relações (tabelas,funções,views,etc).

		Schema
			Conjunto de objetos/relações (tabelas,funções,views,etc).

	Conceitos users/roles/groups
		Roles (papéis ou funções), users e grupo de usuários são "contas", perfis de atuação em banco de dados,
		que possuem permisões em comum ou específicas.


		Nas versões anteriores do PostgreSQL 8.1, usuários e roles tinham comportamentos diferentes. Atualmente,
		roles e users são alias.
		
		É possível que roles pertençam a outras roles;
	
	Administrando users/roles/groups


		CREATE ROLE name [[WITH] option [...]]
			SUPERUSER | NOSUPERUSER
			| CREATEDB | NOCREATEDB
			| CREATEROLE | NOCREATEROLE
			| INHERIT | NOINHERIT
			| LOGIN | NOLOGIN
			| REPLICATION | NOREPLICATION
			| BYPASSRLS | NOBYPASSRLS
			| CONNECTION LIMIT connlimit
			| [ENCRYPTED] PASSWORD 'password' | PASSWORD NULL
			| VALID UNTIL 'timestamp'
			| IN ROLE role_name [, ...]
			| IN GROUP role_name [, ...]
			| ROLE role_name [, ...]
			| ADMIN role_name [, ...]
			| USER role_name [, ...]
			| SYSID uid



		Exemplo:
		
			CREATE ROLE administradores
				CREATEDB
				CREATEROLE
				INHERIT
				NOLOGIN
				REPLICATION
				BYPASSRLS
				CONNECTION LIMIT -1;

			CREATE ROLE professores
				NOCREATEDB
				NOCREATEROLE
				INHERIT
				NOLOGIN
				NOBYPASSRLS
				CONNECTION LIMIT 10;

			CREATE ROLE alunos
				NOCREATEDB
				NOCREATEROLE
				INHERIT
				NOLOGIN
				NOBYPASSRLS
				CONNECTION LIMIT 90;


	Associação Entre Roles 
		Quando uma role assume as permissões de outra role. Necessários a opção INHERIT.
		
		No momento de criação da role:
			- IN ROLE (Passa a pertencer a role informada)
			- ROLE (A role informada passa a pertencer a nova role)
			
		Ou após a criação da role:
			- GRANT [role a ser concedida] TO [role a assumir as permissões]
	 
                CREATE ROLE professores
                   NOCREATEDB
                   NOCREATEROLE
                   INHERIT
                   NOLOGIN
                   NOBYPASSRLS
                   CONNECTION LIMIT 10;


		CREATE ROLE daniel LOGIN CONNECTION LIMIT 1 PASSWORD '123' IN ROLE professores;
			- A role daniel passa a assuir as permissões da role professores

		CREATE ROLE daniel LOGIN CONNECTION LIMIT 1 PASSWORD '123' ROLE professores;
			- A role professores passa a fazer parte da role daniel assumindo suas permissões.
				
		CREATE ROLE daniel LOGIN CONNECTION LIMIT PASSWORD '123';
		GRANT professores TO daniel;


	Desassociar membros entre roles
		
		REVOKE [role que será revogada] FROM [role que terá suas permissões revogadas]
		
		REVOKE professores FROM daniel;

	Alterando uma role
		ALTER ROLE role_specification [WITH] option [...]

		where option can be:
			
	              ALTER ROLE name [[WITH] option [...]]
                        SUPERUSER | NOSUPERUSER
                        | CREATEDB | NOCREATEDB
                        | CREATEROLE | NOCREATEROLE
                        | INHERIT | NOINHERIT
                        | LOGIN | NOLOGIN
                        | REPLICATION | NOREPLICATION
                        | BYPASSRLS | NOBYPASSRLS
                        | CONNECTION LIMIT connlimit
                        | [ENCRYPTED] PASSWORD 'password' | PASSWORD NULL
                        | VALID UNTIL 'timestamp'

	Excluindo uma role

		DROP ROLE role_specification;

	Administrando acessos (GRANT)

		São privilégios de acesso aos objetos do banco de dados.

		Privilégios:
			- --tabela			- --function
			- --coluna			- --language
			- --sequence			- --large object
			- --database			- --schema
			- --domain			- --tablespace
			- --foreign data wrapper	- --type
			- --foreign server
	
		DATABASE
			GRANT {{CREATE|CONNECT|TEMPORARY|TEMP}[,...] | ALL [PRIVILEGES]}
				ON DATABASE database_name [,...]
				TO role_specification [,...] [WITH GRANT OPTION]

		SCHEMA
			GRANT{{CREATE|USAGE}[,...] | ALL [PRIVILEGES]}
				ON SCHEMA schema_name [,...]
				TO role_specification [,...] GRANT OPTION

		TABLE
			GRANT{{SELECT|INSERT|UPDATE|DELETE|TRUNCATE|REFERENCES|TRIGGER}
				[,...] | ALL [PRIVILEGES]}
				ON {[TABLE] table_name [,...]
					| ALL TABLES IN SCHEMA schema_name [,...]}
				TO role_specification [,...] [WITH GRANT OPTION]

	Administrando Acessos (REVOKE)

		DATABASE 
			REVOKE [GRANT OPTION FOR]
				{{CREATE|CONNECT|TEMPORARY|TEMP} [,...] | ALL [PRIVILEGES]}
				ON DATABASE database_name [,...]
				FROM {[GROUP] role_name | PUBLIC}[,...]
				[CASCADE|RESTRICT]

		SCHEMA
			REVOKE [GRANT OPTION FOR]
				{{CREATE|USAGE}[,...] | ALL [PRIVILEGES]}
				ON SCHEMA schema_name [,...]
				FROM {[GROUP] role_name | PUBLIC}[,...]
				[CASCADE|RESTRICT]

		TABLE 
			REVOKE [GRANT OPTION FOR]
				{{SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER}
				[,...] | ALL [PRIVILEGES]}
				ON {[TABLE] table_name [,...]
					| ALL TABLES IN SCHEMA schema_name [,...]}
				FROM {[GROUP] role_name | PUBLIC}[,...]
				[CASCADE | RESTRICT]

		REVOGANDO TODAS AS PERMISSÕES (SIMPLIFICADO)


			REVOKE ALL ON TABLES IN SCHEMA [schema] FROM [role];
			REVOKE ALL ON SCHEMA [schema] FROM [role];
			REVOKE ALL ON DATABASE [database] FROM [role];


	Database, Schemas e Objetos
		Database 
			É o banco de dados. Grupo de schemas e seus objetos, como tabelas, types, views, funções, entre outros.
			Seus schemas e objetos não podem ser compartilhados entre si. 
			Cada database é separado um do outro, compartilhando apenas usuários/roles e configurações do cluster PostgreSQL.

		Schemas
			É um grupo de objetos, como tabelas,types,views,funções,entre outros. É possível relacionar objetos entre diversos schemas.
			Por exemplo: Schema public e schema curso podem ter tabelas com o mesmo nome (teste por exemplo) relacionando-se entre si.

			CREATE SCHEMAS schema_name [AUTHORIZATION role_specification]

			ALTER SCHEMA name RENAME TO new_name
			ALTER SCHEMA name OWNER TO {new_owner|CURRENT_USER|SESSION_USER}
			
			DROP SCHEMA [nome]

			Melhores Práticas
				CREATE SCHEMA IF NOT EXISTS schema_name [AUTHORIZATION role_specification]
				DROP SCHEMA IF EXISTS [nome];
		Objetos
			São as tabelas, views,funções,types,sequences,ente outros,pertencentes aos schemas.

		Database
			CREATE DATABASE name
				[[WITH] [OWNER [=] user_name]
				[TEMPLATE [=] template]
				[ENCODING [=] encoding]
				[LC_COLLATE [=] lc_collate]
				[LC_CTYPE [=] lc_ctype]
				[TABLESPACE [=] tablespace_name]
				[ALLOW_CONNECTIONS [=] allowconn]
				[CONNECTION LIMIT [=] connlimit]
				[IS_TEMPLATE [=] istemplate]]

			ALTER DATABSE name RENAME TO new_name
			ALTER DATABASE name OWNER TO {new_owner | current_user | session_user}
			ALTER DATABASE name SET TABLESPACE new_tablespace

			DROP DATABASE [database_name]

	Tabelas, Colunas e Tipos de dados
		Conjuntos de dados dispostos em colunas e linhas referentes a um objeto comum.

		As colunas são considerdas como "campos da tabelas", como atributos da tabela.
		
		As linhas de uma tabela são chamadas também de tuplas, e é onde estão contidos os valores, os dados.


		Primary Key / Chave Primária / PK
			No conceito de modelo de dados relacional e obedecendo as regras de normalização, uma PK é um conjunto de um ou mais campos que nunca se repetem
			em uma tabela que seus valores garantem a integridade do dado único e a utilização do mesmo como referência para o relacionamento enre demais tabelas.
	
			Não pode haveer duas ocorrências de uma mesma entidade com o mesmo conteúdo na PK
			A chave primária não pode ser composta por atributo opcional, ou seja, atributo que aceite nulo.
			Os atributos identificadores devem ser o conjunto mínimo que pode identificar cada instância de uma entidade.
			Não devem ser usadas chaves extras.
			Não deve conter informação volátil.
			
		Foreign Key / Chave Estrangeira / FK
			Campo, ou conjunro de campos que são referências de chaves primárias de outras tabelas ou da mesma tabela.
			Sua principal função é garantir a integridade referencial entre tabelas.
		
		Tipos de dados
			Numeric Types
			Character Types
			Binary Data Types
			Date/Time Types
			Boolean Types
			Enumerated Types
			Geometric Types
			Network Address Types
			Bit String Types
			Text Search Types	
			
			UUID Type
			XML Type
			JSON Types
			Arrays 
			Composite Types
			Range Types
			Domain Types
			Object Indetifier Types
			pg_lsn Type
			Pseudo-Types

		DML 
			Data Manipulation Language
			Linguagem de Manipulação de dados
			INSERT,UPDATE,DELETE,SELECT
				*O select, alguns consideram como DML, como DQL, que significa data query language, que significa linguagem de consulta de dados*

		DDL 
			Data Definition Language
			Linguagem de definição de dados
			CREATE,ALTER,DROP



