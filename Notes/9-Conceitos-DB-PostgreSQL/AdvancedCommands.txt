Comandos Avançados da Structured Query Language (SQL)

	Views
		View são visões.	
		São "camadas"mpara as tabelas.
		São "alias" para uma ou mais queries.
		Aceitam comandos de SELECT, INSERT, UPDATE e DELETE.
	
		CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW name [(column_name [, ...])]
			[WITH (view_option_name [= view_option_value] [,...])]
			AS query
			[WITH [CASCADE | LOCAL] CHECK OPTION]
			

		IDEMPOTÊNCIA

			CREATE OR REPLACE VIEW vw_banco AS (
				SELECT numero,nome,ativo
				FROM banco
			);

			SELECT numero, nome, ativo
			FROM vw_bancos;
			
			CREATE OR REPLACE VIEW vw_bancos (banco_numero,banco_nome,banco_ativo) AS (
				SELECT numero, nome, ativo
				FROM banco
			);

			SELECT banco_numero, banco_nome, banco_ativo
			FROM vw_bancos;

		INSERT, UPDATE e DELETE
		
			CREATE OR REPLACE VIEW vw_bancos AS (
				SELECT numero, nome, ativo
				FROM banco
			);
	
			SELECT numero,nome,ativo
			FROM bvw_ancos,

			- Funcionam apenas para VIEWs com apenas 1 tabela
			
			INSERT INTO vw_bancos (numero,nome,ativo) VALUES (100,'Banco CEM',TRUE);
			UPDATE vw_bancos SET nome = 'Banco 100' WHERE numero = 100;
			DELETE FROM vw_bancos WHERE numero = 100;

		TEMPORARY

			CREATE OR REPLACE TEMPORARY VIEW vw_bancos AS (
				SELECT numero,nome,ativo
				FROM banco
			);

			SELECT numero,nome,ativo
			FROM vw_bancos;

			VIEW presente apenas na sessão do usuário. Se você se desconectar e conectar novamente, a VIEW não estará disponível.


		RECURSIVE
			
			CREATE OR REPLACE RECURSIVE VIEW (nome_da_view) (campos_da_view) AS (
				SELECT base
				UNION ALL
				SELECT campos
				FROM tabela_base
				JOIN (nome_da_view)
			);
			
			- Obrigatório a existência dos campos da VIEW
			- UNION ALL

			CREATE TABLE IF NOT EXISTS funcionarios (
				id SERIAL NOT NULL,
				nome VARCHAR(50),
				gerente INTEGER,
				PRIMARY KEY(id),
				FOREIGN KEY(gerente) REFERENCES funcionario(id)
			);


			INSERT INTO funcionarios (nome,gerente) VALUES ('Ancelmo',null);
			INSERT INTO funcionarios (nome,gerente) VALUES ('Beatriz',1)
                        INSERT INTO funcionarios (nome,gerente) VALUES ('Magno',1)			
                        INSERT INTO funcionarios (nome,gerente) VALUES ('Cremilda',2)
                        INSERT INTO funcionarios (nome,gerente) VALUES ('Wagner',4)

			CREATE OR REPLACE RECURSIVE VIEW vw_funcionarios(id,gerente,funcionario) AS (
				SELECT id, gerente, nome
				FROM funcionarios
				WHERE gerente IS NULL
				UNION ALL
				SELECT funcionarios.id,funcionarios.gerente,funcionarios.nome
				FROM funcionarios
				JOIN vw_funcionarios ON vw_funcionarios.id = funcionarios.gerente
			);
			
			SELECT id, gerente, funcionario
			FROM vw_funcionarios

	
                        CREATE OR REPLACE RECURSIVE VIEW vw_funcionarios(id,gerente,funcionario) AS ( 
                                SELECT id,CAST(AS VARCHAR) AS gerente, nome
                                FROM funcionarios
                                WHERE gerente IS NULL
                                UNION ALL
                                SELECT funcionarios.id,funcionarios.gerente,funcionarios.nome
                                FROM funcionarios
                                JOIN vw_funcionarios ON vw_funcionarios.id = funcionarios.gerente 
                        	JOIN funcionarios gerentes ON gerentes.id = vw_funcionarios.id
			);
                        
                        SELECT id, gerente, funcionario
                        FROM vw_funcionarios

		WITH OPTIONS
		
			CREATE OR REPLACE VIEW vw_banco AS (
				SELECT numero,nome,ativo
				FROM banco
			);
		
			INSERT INTO vw_bancos (numero,nome,ativo) VALUES (100,'BANCO CEM',FALSE)
				-- OK

			CREATE OR REPLACE VIEW vw_banco AS (
				SELECT numero, nome, ativo
				FROM banco
				WHERE ativo IS TRUE
			) WITH LOCAL CHECK OPTION; 

			INSERT INTO vw_bancos (numero,nome,ativo) VALUES (100,'Banco CEM', FALSE)
				-- ERROR
				
			CREATE OR REPLACE VIEW vw_bancos_ativos AS (
				SELECT numero,nome,ativo
				FROM banco
				WHERE ativo IS TRUE
			)WITH LOCAL CHECK OPTION;
			
			CREATE OR REPLACE VIEW vw_bancos_maiores_que_100 AS (
				SELECT numero,nome,ativo
				FROM vw_banco
				WHERE numero > 100
			)WITH LOCAL CHECK OPTION;

			INSERT INTO vw_bancos_maiores_que_100 (numero,nome,ativo) VALUES (99,'Banco DIO',FALSE)
				-- ERROR
			INSERT INTO vw_bancos_maiores_que_100 (numero,nome,ativo) VALUES (200,'Banco DIO',FALSE)
				-- ERROR

			
				
			);
			


	Transações
		Conceito fundamental de todos os sistemas de bancos de dados.
		Conceito de múltiplas etapas/códigos reunidos emapenas 1 transação, onde o resultado precisa ser tudo ou nada.

		Exemplos:
			UPDATE conta SET valor = valor - 100.00
				WHERE nome = 'Alice';

			UPDATE conta SET valor = valor + 100.00
				WHERE nome = 'Bob';
	


			BEGIN;
				UPDATE conta SET valor = valor - 100.00
				WHERE nome = 'Alice';

				UPDATE conta SET valor = valor + 100.00
				WHERE nome = 'Bob';
			COMMIT;

		
			BEGIN;  
				UPDATE conta SET valor = valor - 100.00
				WHERE nome = 'Alice';

				UPDATE conta SET valor = valor + 100.00
				WHERE nome = 'Bob';
			ROLLBACK;

		
			BEGIN;
				UPDATE conta SET valor = valor - 100.00
				WHERE nome = 'Alice';
		
			SAVEPOINT my_savepoint;
		
				UPDATE conta SET valor = valor + 100.00
				WHERE nome = 'Bob';
			-- Não é para bob, é para Wally

				ROLLBACK TO my_savepoint;
				UPDATE conta SET valor = valor + 100.00
				WHERE nome = 'Wally';
			COMMIT;


    Funções
	    Conjunto de códigos que são executadas dentro de uma transação com a finalidade de facilitar a programação
	e obter o reaproveitamento/reutilização de códigos.

    	Existem 4 tipos de funções:
    		- Query Language Functions (Funções escrita em SQL)
	    	- Procedural Language Functions (Funções escritas em, por exemplo,PL/PGSQL ou PL/PY)
	    	- Internal Functions
	    	- C Language Functions

    	Pórem, o foco aqui é falar sobre USER DEFINED FUNCTIONS.
    	Funções que podem ser criadas pelo usuário.

    	Linguagens 
	    	- SQL
	    	- PL/PGSQL
    		- PL/PY
	    	- PL/PHP
	    	- PL/RUBY
    		- PL/JAVA
	    	- PL/LUA
		-

    	CREATE [OR REPLACE] FUNCTION
    	    name([[argmode] [argname] argtype [{DEFAULT | = } default_expr] [,...]])
                [RETURNS rettype
    		| RETURN TABLE (column_name column_type [,...] )]
    	    {LANGUAGE lang_name
    		| TRANSFORM {FOR TYPE type_name} [,...]
    		| WINDOW
    		| IMMUTABLE | STABLE | VOLATILE | [NOT] LEAKPROOF
    		| CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    		| [EXTERNAL] SECURITY INVOKER | [EXTERNAL] SECURITY DEFINER
    		| PARALLEL {UNSAFE | RESTRICTED | SAFE}
    		| COST execution_cost
    		| ROWS result_rows
    		| SET configuration_parameter {TO value | = value | FROM CURRENT}
    		| AS 'definition'
    		| AS 'obj_file','link_symbol'
    	    }...

	IDEMPOTÊNCIA

    	CREATE OR REPLACE FUNCTION [nome da função]
    
    		- Mesmo nome 
    		- Mesmo tipo de retorno
    		- Mesmo número de parâmetro/argumentos
    	RETURNS
    	- Tipos de retorno (data type)
    		- INTEGER
    		- CHAR/VARCHAR
    		- BOOLEAN
    		- ROW
    		- TABLE
    		- JSON
    	
    	LANGUAGE
    		- SQL
    		- PLPGSQL
    		- PLJAVA
    		- PLPY
    	SEGURANÇA
    		- SECURITY
    			- INVOKER
    			- DEFINER

	COMPORTAMENTO
    		IMMUTABLE:
    			Não pode Alterar o banco de dados.
    			Funções que garantem o mesmo argumentos/parâmetros da função. Trabalha melhor com tipos de current_timestamp
    				e outros tipos de variáveis. Podem conter SELECTS.

		STABLE
    			Não pode alterar o banco de dados.
    			Funções que garantem o mesmo resultado para os mesmos argumentos/parâmetros da função. Trabalha
    				melhor com tipos de current_timestamp e outros tipos de variáveis. Podem conter selects.
		
		VOLATILE
		    	Comportamento padrão. Aceita todos os cenários.


	SEGURANÇA E BOAS PRÁTICAS 
    		- CALLED ON NULL INPUT
    			Padrão.
    			Se qualquer um dos parâmetros/argumentos for NULL, a função será executada.

		- RETURNS NULL ON NULL INPUT
    			Se qualquer um dos parâmetros/argumentos for NULL, a função retornará NULL
    			
		- SECURITY INVOKER 
    			Padrão.
    			A função é executada com as permissões de quem executa.		


		- SECURITY DEFINER
	    		A função é executada com as permissões de quem criou a função.

	RECURSOS
	    	- COST
	    		Custo/row em unidades de CPU
	    	- ROWS
		    	Número estimado de linhas que será analisada pelo planner

	SQL FUNCTIONS
    		Não é possível utilizar TRANSAÇÕES
    
    		CREATE OR REPLACE FUNCTION fc_somar (INTEGER,INTEGER)
    		RETURNS INTEGER
    		LANGUAGE SQL
    		AS $$
    			SELECT $1 + $2;
    		$$;
    	
    		CREATE OR REPLACE FUNCTION fc_somar (num1 INTEGER,num2 INETEGER)
    		RETURNS INTEGER
    		LANGUAGE SQL
    		AS $$
    			SELECT num1+2;
    		$$;
    
    		CREATE OR REPLACE FUNCTION fc_bancos_add(p_numero INTEGER,p_nome VARCHAR,p_ativo BOOLEAN)
    		RETURNS TABLE (numero INTEGER, nome VARCHAR)
    		RETURNS NULL ON NULL INPUT
    		LANGUAGE SQL
    		AS $$
    			INSERT INTO banco(numero,ativo)
    			VALUES (p_numero,p_nome,p_ativo);
    
    			SELECT numero, nome
    			FROM banco
    			WHERE bumero = p_numero;          
              	$$;


	PLPGSQL
    		CREATE OR REPLACE FUNCTION banco_add(p_numero INTEGER, p_nome VARCHAR,p_ativo BOOLEAN)
    		RETURNS BOOLEAN 
    		LANGUAGE PLPGSQL
    		AS $$
    		DECLARE variavel_id INTEGER;
    		BEGIN 
    			SELECT INTO variavel_id numero FROM banco WHERE nome = p_nome;
    	
    			IF variavel_id IS NULL THEN 
    				INSERT INTO banco (numero,nome,ativo) VALUES (p_numero,p_nome,p_ativo);
    			ELSE
    				RETURN FALSE;
    			END IF;
    
    			SELECT INTO variavel_id numero FROM banco WHERE nome = p_nome;
    
    			IF variavel_id IS NULL THEN 
    				RETURN FALSE;
    			ELSE
    				RETURN TRUE;
    			END IF;
    		END; $$;
    
    		SELECT banco_add(13,'Banco azarado',TRUE);


